# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

type Agreement {
    counter: Int!
    data: String!
    id: ID!
}

type Flow {
    deposit: BigInt!
    flowRate: BigInt!
    id: ID!
    owedDeposit: BigInt!
    timestamp: BigInt!
    totalReceiverFlowRate: BigInt!
    totalSenderFlowRate: BigInt!
}

type Liquidation {
    deposit: BigInt!
    id: ID!
    penaltyAccount: String!
    rewardAccount: String!
    timestamp: Int!
}

type Query {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    agreement(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Agreement
    agreements(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Agreement_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Agreement_filter
    ): [Agreement!]!
    flow(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Flow
    flows(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Flow_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Flow_filter
    ): [Flow!]!
    liquidation(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Liquidation
    liquidations(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Liquidation_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Liquidation_filter
    ): [Liquidation!]!
    transfer(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Transfer
    transfers(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Transfer_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Transfer_filter
    ): [Transfer!]!
}

type Subscription {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    agreement(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Agreement
    agreements(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Agreement_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Agreement_filter
    ): [Agreement!]!
    flow(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Flow
    flows(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Flow_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Flow_filter
    ): [Flow!]!
    liquidation(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Liquidation
    liquidations(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Liquidation_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Liquidation_filter
    ): [Liquidation!]!
    transfer(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Transfer
    transfers(
        "The block at which the query should be executed. Can either be an `{ number: Int }` containing the block number or a `{ hash: Bytes }` value containing a block hash. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Transfer_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `ALLOW` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Transfer_filter
    ): [Transfer!]!
}

type Transfer {
    from: String!
    id: ID!
}

type _Block_ {
    "The hash of the block"
    hash: Bytes
    "The block number"
    number: Int!
}

"The type for the top-level _meta field"
type _Meta_ {
    """

    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!
    "The deployment ID"
    deployment: String!
    "If `true`, the subgraph encountered indexing errors at some past block"
    hasIndexingErrors: Boolean!
}

enum Agreement_orderBy {
    counter
    data
    id
}

enum Flow_orderBy {
    deposit
    flowRate
    id
    owedDeposit
    timestamp
    totalReceiverFlowRate
    totalSenderFlowRate
}

enum Liquidation_orderBy {
    deposit
    id
    penaltyAccount
    rewardAccount
    timestamp
}

enum OrderDirection {
    asc
    desc
}

enum Transfer_orderBy {
    from
    id
}

enum _SubgraphErrorPolicy_ {
    "Data will be returned even if the subgraph has indexing errors"
    allow
    "If the subgraph has indexing errors, data will be omitted. The default."
    deny
}

input Agreement_filter {
    counter: Int
    counter_gt: Int
    counter_gte: Int
    counter_in: [Int!]
    counter_lt: Int
    counter_lte: Int
    counter_not: Int
    counter_not_in: [Int!]
    data: String
    data_contains: String
    data_ends_with: String
    data_gt: String
    data_gte: String
    data_in: [String!]
    data_lt: String
    data_lte: String
    data_not: String
    data_not_contains: String
    data_not_ends_with: String
    data_not_in: [String!]
    data_not_starts_with: String
    data_starts_with: String
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
}

input Block_height {
    hash: Bytes
    number: Int
}

input Flow_filter {
    deposit: BigInt
    deposit_gt: BigInt
    deposit_gte: BigInt
    deposit_in: [BigInt!]
    deposit_lt: BigInt
    deposit_lte: BigInt
    deposit_not: BigInt
    deposit_not_in: [BigInt!]
    flowRate: BigInt
    flowRate_gt: BigInt
    flowRate_gte: BigInt
    flowRate_in: [BigInt!]
    flowRate_lt: BigInt
    flowRate_lte: BigInt
    flowRate_not: BigInt
    flowRate_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    owedDeposit: BigInt
    owedDeposit_gt: BigInt
    owedDeposit_gte: BigInt
    owedDeposit_in: [BigInt!]
    owedDeposit_lt: BigInt
    owedDeposit_lte: BigInt
    owedDeposit_not: BigInt
    owedDeposit_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    totalReceiverFlowRate: BigInt
    totalReceiverFlowRate_gt: BigInt
    totalReceiverFlowRate_gte: BigInt
    totalReceiverFlowRate_in: [BigInt!]
    totalReceiverFlowRate_lt: BigInt
    totalReceiverFlowRate_lte: BigInt
    totalReceiverFlowRate_not: BigInt
    totalReceiverFlowRate_not_in: [BigInt!]
    totalSenderFlowRate: BigInt
    totalSenderFlowRate_gt: BigInt
    totalSenderFlowRate_gte: BigInt
    totalSenderFlowRate_in: [BigInt!]
    totalSenderFlowRate_lt: BigInt
    totalSenderFlowRate_lte: BigInt
    totalSenderFlowRate_not: BigInt
    totalSenderFlowRate_not_in: [BigInt!]
}

input Liquidation_filter {
    deposit: BigInt
    deposit_gt: BigInt
    deposit_gte: BigInt
    deposit_in: [BigInt!]
    deposit_lt: BigInt
    deposit_lte: BigInt
    deposit_not: BigInt
    deposit_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    penaltyAccount: String
    penaltyAccount_contains: String
    penaltyAccount_ends_with: String
    penaltyAccount_gt: String
    penaltyAccount_gte: String
    penaltyAccount_in: [String!]
    penaltyAccount_lt: String
    penaltyAccount_lte: String
    penaltyAccount_not: String
    penaltyAccount_not_contains: String
    penaltyAccount_not_ends_with: String
    penaltyAccount_not_in: [String!]
    penaltyAccount_not_starts_with: String
    penaltyAccount_starts_with: String
    rewardAccount: String
    rewardAccount_contains: String
    rewardAccount_ends_with: String
    rewardAccount_gt: String
    rewardAccount_gte: String
    rewardAccount_in: [String!]
    rewardAccount_lt: String
    rewardAccount_lte: String
    rewardAccount_not: String
    rewardAccount_not_contains: String
    rewardAccount_not_ends_with: String
    rewardAccount_not_in: [String!]
    rewardAccount_not_starts_with: String
    rewardAccount_starts_with: String
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
}

input Transfer_filter {
    from: String
    from_contains: String
    from_ends_with: String
    from_gt: String
    from_gte: String
    from_in: [String!]
    from_lt: String
    from_lte: String
    from_not: String
    from_not_contains: String
    from_not_ends_with: String
    from_not_in: [String!]
    from_not_starts_with: String
    from_starts_with: String
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
}


scalar BigDecimal

scalar BigInt

scalar Bytes